name: Stage and test

on:
  pull_request:  # Triggered on pull requests to the 'main' branch
    branches:
      - 'main'
  workflow_dispatch:  # Triggered manually through GitHub Actions UI

# Define environment variables used in the workflow
env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  WORKING_DIR: ./infrastructure  # Working directory for the Terraform code

# Define the job for deploying the 'stage' environment
jobs:
  deploy_stage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout  # Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Terraform  # Set up Terraform
        uses: hashicorp/setup-terraform@v1
        
      - name: Terraform init  # Initialize Terraform in the specified working directory
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
          
      - name: Terraform workspace select or create stage  # Select or create a Terraform workspace named 'stage'
        run: terraform workspace select stage || terraform workspace new stage
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Terraform apply stage  # Apply Terraform changes for the 'stage' environment
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}

      - name: Get Web Endpoint  # Retrieve the primary web endpoint for the 'stage' environment
        id: get_web_endpoint
        run: echo "STAGE_WEB_ENDPOINT=$(terraform output -raw primary_web_endpoint)" 
        working-directory: ${{ env.WORKING_DIR }}

# Define the job for testing the infrastructure
  test_infrastructure:
    needs: deploy_stage  # This job depends on the 'deploy_stage' job and will run after it
    runs-on: ubuntu-latest
  
    steps:
      - name: Check out code  # Checkout the repository
        uses: actions/checkout@v2
  
      - name: Setup Terraform  # Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform  # Initialize Terraform in the specified working directory
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
  
      - name: Terraform workspace select or create stage  # Select or create a Terraform workspace named 'stage'
        run: terraform workspace select stage || terraform workspace new stage
        working-directory: ${{ env.WORKING_DIR }}
  
      - name: Validate  # Validate the Terraform configuration
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}

      - name: Tfsec  # Run security checks using Tfsec
        continue-on-error: true  # Continue the workflow even if Tfsec check fails
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          working_directory: ${{ env.WORKING_DIR }}

      - name: tflint  # Run linting checks using tflint
        uses: "infinite-automations/tflint-all-in-one@v1.0.0"
        with:
          directory: ${{ env.WORKING_DIR }}
